<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "tck.ent">
%BOOK_ENTITIES;
]>
<chapter id="reporting">
  <title>Reports</title>

  <para>This chapter covers the two types of reports that can be generated
  from the TCK, an assertion coverage report and the test execution
  results.</para>

  <section>
    <title>Bean Validation TCK Coverage Report</title>

    <para>A specification can be distilled into a collection of assertions
    that define the behavior of the software. This section introduces the Bean
    Validation TCK coverage report, which documents the relationship between
    the assertions that have been identified in the &jsrVersion; specification
    document and the tests in the TCK test suite.</para>

    <para>The structure of this report is controlled by the assertion
    document, so we'll start there.</para>

    <section>
      <title>Bean Validation TCK Assertions</title>

      <para>The Bean Validation TCK developers have analyzed the &jsrVersion;
      specification document and identified the assertions that are present in
      each chapter. Here's an example of one such assertion found in section
      2.1: <quote>Every constraint annotation must define a message element of
      type String</quote></para>

      <para>The assertions are listed in the XML file
      <filename>tck-audit.xml</filename> in the Bean Validation TCK
      distribution. Each assertion is identified by the section of the
      specification document in which it resides and assigned a unique
      paragraph identifier to narrow down the location of the assertion
      further. To continue with the example, the assertion shown above is
      listed in the <filename>tck-audit.xml</filename> file using this XML
      fragment:</para>

      <programlisting role="XML">&lt;section id="2.1.1" title="Constraint definition properties"&gt;
  ...
   &lt;assertion id="c"&gt;
      &lt;text&gt;Every constraint annotation must define a message element of type String&lt;/text&gt;
   &lt;/assertion&gt;
  ...
&lt;/section&gt;</programlisting>

      <para>The strategy of the Bean Validation TCK is to write a test which
      validates this assertion when run against an implementation. A test case
      (a method annotated with <literal>@Test</literal>) is correlated with an
      assertion using the
      <literal>@org.jboss.test.audit.annotations.SpecAssertion</literal>
      annotation as follows:</para>

      <programlisting role="JAVA">@Test
@SpecAssertion(section = "2.1.1", id = "c")
public void testConstraintDefinitionWithoutMessageParameter() {
   try {
       Validator validator = TestUtil.getValidatorUnderTest();
       validator.validate( new DummyEntityNoMessage() );
       fail( "The used constraint does not define a message parameter. The validation should have failed." );
   }
   catch ( ConstraintDefinitionException e ) {
       // success
}
</programlisting>

      <para>To help evaluate the distribution of coverage for these
      assertions, the TCK provides a detailed coverage report. This report is
      also useful to help implementors match tests with the language in the
      specification that supports the behavior being tested.</para>
    </section>

    <section>
      <title>The Coverage Report</title>

      <para>The coverage report is an HTML report generated as part of the TCK
      project build. Specifically, it is generated by an annotation processor
      that attaches to the compilation of the classes in the TCK test
      suite.<tip>
          <para>You can find the source code for this processor in the GitHub
          repository <ulink
          url="https://github.com/jboss/jboss-test-audit">https://github.com/jboss/jboss-test-audit</ulink></para>
        </tip> The report is written to the file
      <filename>target/coverage-report/coverage-beanvalidation.html</filename>.
      The report itself has five sections:</para>

      <orderedlist>
        <listitem>
          <para><emphasis role="bold">Chapter Summary</emphasis> - List the
          chapters (that contain assertions) in the specification document
          along with total assertions, tests and coverage percentage.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Section Summary</emphasis> - Lists the
          sections (that contain assertions) in the specification document
          along with total assertions, tests and coverage percentage.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Coverage Detail</emphasis> - Each
          assertion and the test that covers it, if any.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Unmatched Tests</emphasis> - A list of
          tests for which there is no matching assertion (useful during TCK
          development).</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Unversioned Tests</emphasis> - A list of
          tests for which there is no <literal>@SpecVersion</literal>
          annotation on the test class (useful during TCK development).</para>
        </listitem>
      </orderedlist>

      <para>The coverage report is color coded to indicate the status of an
      assertion, or group of assertions. The status codes are as
      follows:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Covered</emphasis> - a test exists for
          this assertion</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Not covered</emphasis> - no test exists
          for this assertion</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold"> Unimplemented</emphasis> - a test
          exists, but is unimplemented</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Untestable</emphasis> - the assertion
          has been deemed untestable, a note, explaining why, is normally
          provided</para>
        </listitem>
      </itemizedlist>

      <para>For reasons provided in the <literal>tck-audit.xml</literal>
      document and presented in the coverage report, some assertions are not
      testable.</para>

      <para>The coverage report does not give any indication as to whether the
      tests are passing. That's where the TestNG reports come in.</para>
    </section>
  </section>

  <section>
    <title>The TestNG Report</title>

    <para>As you by now know, the Bean Validation TCK test suite is really
    just a TestNG test suite. That means an execution of the Bean Validation
    TCK test suite produces all the same reports that TestNG produces. This
    section will go over those reports and show you were to go to find each of
    them.</para>

    <section>
      <title>Maven 2, Surefire and TestNG</title>

      <para>When the Bean Validation TCK test suite is executed during the
      Maven 2 test phase of the TCK runner project, TestNG is invoked
      indirectly through the Maven Surefire plugin. Surefire is a test
      execution abstraction layer capable of executing a mix of tests written
      for JUnit, TestNG, and other supported test frameworks.</para>

      <para>Why is this relevant? It means two things. First, it means that
      you are going to get a summary of the test run on the commandline.
      Here's the output generated when the tests are run using standalone
      mode.</para>

      <programlisting>-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
Tests run: 697, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 26.413 sec

Results :

Tests run: 697, Failures: 0, Errors: 0, Skipped: 0
</programlisting>

      <note>
        <para>The number of tests executed, the execution time, and the output
        will differ when you run the tests using in-container mode as the Bean
        Validation TCK requires.</para>
      </note>

      <para>If the Maven reporting plugin that compliments Surefire is
      configured properly, Maven will also generate a generic HTML test result
      report. That report is written to the file test-report.html in the
      <filename>target/surefire-reports</filename> directory of the TCK runner
      project. It shows how many tests were run, how many failed and the
      success rate of the test run.</para>
    </section>
  </section>
</chapter>
