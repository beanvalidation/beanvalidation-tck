<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "tck.ent">
%BOOK_ENTITIES;
]>
<chapter id="configuration">
  <title>Configuration</title>

  <para>This chapter lays out how to configure the TCK harness by specifying
  the <classname>DeployableContainer</classname>, selecting the container
  interaction style and setting various other switches. Maven 2 is used in the
  configuration examples, mainly because it is the de facto standard build tool
  at the time of writing. However, the test harness is not dependent on a
  specific build tool and any other tool, for example Ant or Gradle, work as
  well.</para>

  <para> If you have not made yourself familiar with the <ulink
  url="https://docs.jboss.org/author/display/ARQ/Reference+Guide">Arquillian
  documentation</ulink> by now, this is a good time to do it. It will give you
  a deeper understanding of the different parts described in the following
  sections.<tip>
      <para>If you followed all the steps of <xref linkend="installation"/>
      you find the full <filename>pom.xml</filename> used in the following
      examples in the directory
      <filename>jsr349/ri/tck-runner</filename>.</para>
    </tip></para>

  <section>
    <title>Configuring TestNG to execute the TCK</title>

    <para>The Bean Validation test harness is built atop TestNG, and it is
    TestNG that is responsible for selecting the tests to execute, the order
    of execution, and reporting the results. Detailed TestNG documentation can
    be found at <ulink
    url="http://testng.org/doc/documentation-main.html">testng.org</ulink>.</para>

    <para>The <literal>tck-tests.xml</literal> artifact provided in the TCK
    distribution must be run by TestNG (described by the TestNG documentation
    as "with a <literal>testng.xml</literal> file") unmodified for an
    implementation to pass the TCK. For testing purposes it is of course ok to
    modify the file.</para>

    <programlisting>&lt;suite name="JSR-349-TCK" verbose="1"&gt;
    &lt;test name="JSR-349-TCK"&gt;

        &lt;method-selectors&gt;
            &lt;method-selector&gt;
                &lt;selector-class name="org.hibernate.beanvalidation.tck.util.IntegrationTestsMethodSelector"/&gt;
            &lt;/method-selector&gt;
        &lt;/method-selectors&gt;

        &lt;packages&gt;
            &lt;package name="org.hibernate.beanvalidation.tck.tests"/&gt;
        &lt;/packages&gt;
    &lt;/test&gt;
&lt;/suite&gt;</programlisting>

    <para>TestNG provides extensive reporting information. Depending on the
    build tool or IDE you use, the reporting will take a different format.
    Please consult the TestNG documentation and the tool documentation for
    more information.</para>

    <tip>
      <para>In the example below the
      <emphasis>maven-dependency-plugin</emphasis> is used to extract the
      <filename>tck-tests.xml</filename> from the artifact jar file to make it
      available for the surefire configuration.</para>
    </tip>
  </section>

  <section>
    <title>Selecting the <classname>ValidationProvider</classname></title>

    <para>The most important configuration you have make in order to run the
    Bean Validation TCK is to specify your
    <classname>ValidationProvider</classname> you want to run your tests
    against. To do so you need to set the Java system property
    <property>validation.provider</property> to the fully specified class name
    of your <classname>ValidationProvider</classname>. In the examples below
    this is done via the <emphasis>systemProperties</emphasis> configuration
    of the <emphasis>maven-surefire-plugin</emphasis>. This property will be
    picked up by
    <classname>org.hibernate.beanvalidation.tck.util.TestUtil</classname>
    which will instantiate the <classname>Validator</classname> under test.
    This means the test harness does not rely on the service provider
    mechanism to instantiate the Bean Validation provider under test, partly
    because this selection mechanism is under test as well.<programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;artifactId&gt;hibernate-validator-parent&lt;/artifactId&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;version&gt;5.0.0-SNAPSHOT&lt;/version&gt;
        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;
    &lt;/parent&gt;

    &lt;artifactId&gt;hibernate-validator-tck-runner&lt;/artifactId&gt;

    &lt;name&gt;Hibernate Validator TCK Runner&lt;/name&gt;

    &lt;properties&gt;
        &lt;tck.version&gt;1.1.0-SNAPSHOT&lt;/tck.version&gt;
        &lt;tck.suite.file&gt;${project.build.directory}/dependency/beanvalidation-tck-suite.xml&lt;/tck.suite.file&gt;
        &lt;arquillian.version&gt;1.0.0.Final&lt;/arquillian.version&gt;
        &lt;validation.provider&gt;org.hibernate.validator.HibernateValidator&lt;/validation.provider&gt;
        &lt;remote.debug/&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.validation&lt;/groupId&gt;
            &lt;artifactId&gt;validation-api&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.testng&lt;/groupId&gt;
            &lt;artifactId&gt;testng&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate.beanvalidation.tck&lt;/groupId&gt;
            &lt;artifactId&gt;beanvalidation-tck&lt;/artifactId&gt;
            &lt;version&gt;${tck.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate.javax.persistence&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-jpa-2.0-api&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.jboss.arquillian.testng&lt;/groupId&gt;
            &lt;artifactId&gt;arquillian-testng-container&lt;/artifactId&gt;
            &lt;version&gt;${arquillian.version}&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.jboss.arquillian.protocol&lt;/groupId&gt;
            &lt;artifactId&gt;arquillian-protocol-servlet&lt;/artifactId&gt;
            &lt;version&gt;${arquillian.version}&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;testResources&gt;
            &lt;testResource&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
                &lt;directory&gt;src/test/resources&lt;/directory&gt;
            &lt;/testResource&gt;
        &lt;/testResources&gt;
        &lt;plugins&gt;
           &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;copy-tck-test-suite-file&lt;/id&gt;
                        &lt;phase&gt;generate-test-sources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;copy&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;stripVersion&gt;true&lt;/stripVersion&gt;
                            &lt;artifactItems&gt;
                                &lt;artifactItem&gt;
                                    &lt;groupId&gt;org.hibernate.beanvalidation.tck&lt;/groupId&gt;
                                    &lt;artifactId&gt;beanvalidation-tck&lt;/artifactId&gt;
                                    &lt;type&gt;xml&lt;/type&gt;
                                    &lt;classifier&gt;suite&lt;/classifier&gt;
                                    &lt;overWrite&gt;false&lt;/overWrite&gt;
                                &lt;/artifactItem&gt;
                            &lt;/artifactItems&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
<emphasis role="bold">            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;suiteXmlFiles&gt;
                        &lt;suiteXmlFile&gt;${tck.suite.file}&lt;/suiteXmlFile&gt;
                    &lt;/suiteXmlFiles&gt;
                    &lt;argLine&gt;-Xmx128m&lt;/argLine&gt;
                    &lt;forkMode&gt;once&lt;/forkMode&gt;
                    &lt;systemProperties&gt;
                        &lt;property&gt;
                            &lt;name&gt;validation.provider&lt;/name&gt;
                            &lt;value&gt;${validation.provider}&lt;/value&gt;
                        &lt;/property&gt;
                    &lt;/systemProperties&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;</emphasis>
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-report-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;generate-test-report&lt;/id&gt;
                        &lt;phase&gt;test&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;report-only&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;outputDirectory&gt;${project.build.directory}/surefire-reports&lt;/outputDirectory&gt;
                    &lt;outputName&gt;test-report&lt;/outputName&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</programlisting></para>
  </section>

  <section id="configuration-deployable-container">
    <title>Selecting the <classname>DeployableContainer</classname></title>

    <para>After setting the <classname>ValidationProvider</classname> you have
    to make a choice on the right <classname>DeployableContainer</classname>.
    Arquillian picks which container it is going to use to deploy the test
    archive and negotiate test execution using Java's service provider
    mechanism. Concretely Arquillian is looking for an implementation of the
    <classname>DeployableContainer</classname> SPI is on the classpath. In the
    following examples this choice is made through the use of Maven profiles
    adding the appropriate test dependencies.</para>

    <section>
      <title>Local test execution via
      <classname>BeanValidationLocalContainer</classname></title>

      <para>Before trying to run the test harness against a real Java EE
      container it is recommended to run the test in a local JVM mode. The
      Bean Validation test harness ships with a
      <classname>DeployableContainer</classname> called
      <classname>BeanValidationLocalContainer</classname> which allows you to
      do so. All you need is the right dependency:</para>

      <para><programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

   ...

    &lt;profiles&gt;
<emphasis role="bold">        &lt;profile&gt;
            &lt;id&gt;local&lt;/id&gt;
            &lt;activation&gt;
                &lt;property&gt;
                    &lt;name&gt;incontainer&lt;/name&gt;
                    &lt;value&gt;!true&lt;/value&gt;
                &lt;/property&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;arquillian.protocol&gt;Local&lt;/arquillian.protocol&gt;
            &lt;/properties&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate.beanvalidation.tck&lt;/groupId&gt;
                    &lt;artifactId&gt;standalone-container-adapter&lt;/artifactId&gt;
                    &lt;version&gt;${tck.version}&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
        &lt;/profile&gt;</emphasis>
    &lt;/profiles&gt;
&lt;/project&gt;</programlisting>As you can see the <emphasis>local
      </emphasis>profile is activated by default. It adds the dependency
      <classname>org.hibernate.beanvalidation.tck:standalone-container-adapter</classname>
      which contains the <classname>DeployableContainer</classname>
      <classname>BeanValidationLocalContainer</classname>. If the test harness
      is executed with this dependency on the classpath the tests will run in
      the local JVM. The purpose of the property
      <property>arquillian.protocol</property> will be discussed in <xref
      linkend="configuration-arquillian-xml"/>. Running the test harness is as
      easy as executing:<programlisting>mvn test</programlisting><note>
          <para>The local execution mode is just a convenience for developers.
          To pass the Bean Validation TCK the test harness has to pass in a
          Java EE container. The reason for this is that Bean Validation is
          part of the Java EE specification. </para>
        </note><tip>
          <para>Arquillian will throw an exception in case it finds more than
          one <classname>DeployableContainer</classname> implementations on
          the classpath. If you want to be able to run in local as well as
          incontainer mode from the same project setup you will need to
          separate the dependencies. This is the main purpose of the profiles
          used in this example.</para>
        </tip></para>
    </section>

    <section>
      <title>Remote test execution in managed JBoss AS 7</title>

      <para>Now let's try to run the tests in a Java EE container, namely
      JBoss AS 7. For this we defined a new profile
      <property>incontainer</property> which can be activated
      via:<programlisting>&gt; mvn test -Dincontainer</programlisting>In this
      case we are adding the dependency
      <property>org.jboss.as:jboss-as-arquillian-container-managed</property>
      which will enable a managed JBoss AS 7 as
      <classname>DeployableContainer</classname>. AS 7 could be already
      installed on the system or as in this case be downloaded and unpacked
      via the <emphasis>maven-dependency-plugin</emphasis> prior to the test
      run.</para>

      <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

   ...

    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;local&lt;/id&gt;
            &lt;activation&gt;
                &lt;property&gt;
                    &lt;name&gt;incontainer&lt;/name&gt;
                    &lt;value&gt;!true&lt;/value&gt;
                &lt;/property&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;arquillian.protocol&gt;Local&lt;/arquillian.protocol&gt;
            &lt;/properties&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate.beanvalidation.tck&lt;/groupId&gt;
                    &lt;artifactId&gt;standalone-container-adapter&lt;/artifactId&gt;
                    &lt;version&gt;${tck.version}&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
        &lt;/profile&gt;
  
   <emphasis role="bold">     &lt;profile&gt;
            &lt;id&gt;incontainer&lt;/id&gt;
            &lt;activation&gt;
                &lt;property&gt;
                    &lt;name&gt;incontainer&lt;/name&gt;
                &lt;/property&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;arquillian.protocol&gt;Servlet 3.0&lt;/arquillian.protocol&gt;
            &lt;/properties&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;org.jboss.as&lt;/groupId&gt;
                    &lt;artifactId&gt;jboss-as-arquillian-container-managed&lt;/artifactId&gt;
                    &lt;version&gt;${jbossas.version}&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
            &lt;build&gt;
                &lt;plugins&gt;
                    &lt;plugin&gt;
                        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
                        &lt;executions&gt;
                            &lt;execution&gt;
                                &lt;id&gt;unpack&lt;/id&gt;
                                &lt;phase&gt;process-test-resources&lt;/phase&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;unpack&lt;/goal&gt;
                                &lt;/goals&gt;
                                &lt;configuration&gt;
                                    &lt;artifactItems&gt;
                                        &lt;artifactItem&gt;
                                            &lt;groupId&gt;org.jboss.as&lt;/groupId&gt;
                                            &lt;artifactId&gt;jboss-as-dist&lt;/artifactId&gt;
                                            &lt;version&gt;${jbossas.version}&lt;/version&gt;
                                            &lt;type&gt;zip&lt;/type&gt;
                                            &lt;overWrite&gt;false&lt;/overWrite&gt;
                                            &lt;outputDirectory&gt;${project.build.directory}&lt;/outputDirectory&gt;
                                        &lt;/artifactItem&gt;
                                    &lt;/artifactItems&gt;
                                &lt;/configuration&gt;
                            &lt;/execution&gt;
                            &lt;execution&gt;
                                &lt;id&gt;copy-beanvalidation-api&lt;/id&gt;
                                &lt;phase&gt;generate-test-sources&lt;/phase&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;copy&lt;/goal&gt;
                                &lt;/goals&gt;
                                &lt;configuration&gt;
                                    &lt;outputDirectory&gt;
                                        ${project.build.directory}/jboss-as-${jbossas.version}/modules/javax/validation/api/main
                                    &lt;/outputDirectory&gt;
                                    &lt;stripVersion&gt;true&lt;/stripVersion&gt;
                                    &lt;artifactItems&gt;
                                        &lt;artifactItem&gt;
                                            &lt;groupId&gt;javax.validation&lt;/groupId&gt;
                                            &lt;artifactId&gt;validation-api&lt;/artifactId&gt;
                                        &lt;/artifactItem&gt;
                                    &lt;/artifactItems&gt;
                                &lt;/configuration&gt;
                            &lt;/execution&gt;
                        &lt;/executions&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                            &lt;argLine&gt;-Xmx1024m -Djava.util.logging.manager=org.jboss.logmanager.LogManager&lt;/argLine&gt;
                            &lt;forkMode&gt;once&lt;/forkMode&gt;
                            &lt;suiteXmlFiles&gt;
                                &lt;suiteXmlFile&gt;${tck.suite.file}&lt;/suiteXmlFile&gt;
                            &lt;/suiteXmlFiles&gt;
                            &lt;systemPropertyVariables&gt;
                                &lt;arquillian.launch&gt;incontainer&lt;/arquillian.launch&gt;
                                &lt;validation.provider&gt;${validation.provider}&lt;/validation.provider&gt;
                                &lt;includeIntegrationTests&gt;true&lt;/includeIntegrationTests&gt;
                            &lt;/systemPropertyVariables&gt;
                        &lt;/configuration&gt;
                    &lt;/plugin&gt;
                &lt;/plugins&gt;
            &lt;/build&gt;
        &lt;/profile&gt;</emphasis>
    &lt;/profiles&gt;
&lt;/project&gt;</programlisting>

      <tip>
        <para>You find a list of available deployable containers in the
        Arquillian documentation. Refer to <ulink
        url="https://docs.jboss.org/author/display/ARQ/Container+adapters">Container
        adapters</ulink>.</para>
      </tip>

      <section>
        <title>Tests annotated with
        <classname>@IntegrationTest</classname></title>

        <para>Some of the tests can only run within a container (mainly due to
        the way they are setup). These tests are annotated with
        @IntegrationTest. Since these tests would fail in local execution mode
        they can be excluded by setting the system property
        <property>includeIntegrationTests</property> to
        <constant>false</constant> (or not specifying it at all). To pass the
        TCK the property needs to be set to <constant>true</constant> and all
        integration tests need to run. <tip>
            <para>The in- an exclusion of integration tests is handled via a
            TestNG specific <classname>IMethodSelector</classname>, more
            concretely <ulink
            url="https://github.com/beanvalidation/beanvalidation-tck/tree/master/tests/src/main/java/org/hibernate/beanvalidation/tck/util/IntegrationTestsMethodSelector.java"><classname>IntegrationTestsMethodSelector</classname></ulink>.</para>
          </tip></para>
      </section>

      <section>
        <title>Debugging remote test executions</title>

        <para>The easiest way to debug the tests when they are executes in a
        remote container is to open a remote debugging session. In order to do
        so the JVM needs to be started with the right remote debugging
        options. Again this can be achieved via a profile:<programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

   ...

    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;local&lt;/id&gt;
            &lt;activation&gt;
                &lt;property&gt;
                    &lt;name&gt;incontainer&lt;/name&gt;
                    &lt;value&gt;!true&lt;/value&gt;
                &lt;/property&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;arquillian.protocol&gt;Local&lt;/arquillian.protocol&gt;
            &lt;/properties&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;org.hibernate.beanvalidation.tck&lt;/groupId&gt;
                    &lt;artifactId&gt;standalone-container-adapter&lt;/artifactId&gt;
                    &lt;version&gt;${tck.version}&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
        &lt;/profile&gt;

<emphasis role="bold">        &lt;profile&gt;
            &lt;id&gt;incontainer-debug&lt;/id&gt;
            &lt;activation&gt;
                &lt;property&gt;
                    &lt;name&gt;debug&lt;/name&gt;
                &lt;/property&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;remote.debug&gt;-Xnoagent -Djava.compiler=NONE -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&lt;/remote.debug&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;</emphasis>
  
        &lt;profile&gt;
            &lt;id&gt;incontainer&lt;/id&gt;
            &lt;activation&gt;
                &lt;property&gt;
                    &lt;name&gt;incontainer&lt;/name&gt;
                &lt;/property&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;arquillian.protocol&gt;Servlet 3.0&lt;/arquillian.protocol&gt;
            &lt;/properties&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;org.jboss.as&lt;/groupId&gt;
                    &lt;artifactId&gt;jboss-as-arquillian-container-managed&lt;/artifactId&gt;
                    &lt;version&gt;${jbossas.version}&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
            &lt;build&gt;
                &lt;plugins&gt;
                    &lt;plugin&gt;
                        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
                        &lt;executions&gt;
                            &lt;execution&gt;
                                &lt;id&gt;unpack&lt;/id&gt;
                                &lt;phase&gt;process-test-resources&lt;/phase&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;unpack&lt;/goal&gt;
                                &lt;/goals&gt;
                                &lt;configuration&gt;
                                    &lt;artifactItems&gt;
                                        &lt;artifactItem&gt;
                                            &lt;groupId&gt;org.jboss.as&lt;/groupId&gt;
                                            &lt;artifactId&gt;jboss-as-dist&lt;/artifactId&gt;
                                            &lt;version&gt;${jbossas.version}&lt;/version&gt;
                                            &lt;type&gt;zip&lt;/type&gt;
                                            &lt;overWrite&gt;false&lt;/overWrite&gt;
                                            &lt;outputDirectory&gt;${project.build.directory}&lt;/outputDirectory&gt;
                                        &lt;/artifactItem&gt;
                                    &lt;/artifactItems&gt;
                                &lt;/configuration&gt;
                            &lt;/execution&gt;
                            &lt;execution&gt;
                                &lt;id&gt;copy-beanvalidation-api&lt;/id&gt;
                                &lt;phase&gt;generate-test-sources&lt;/phase&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;copy&lt;/goal&gt;
                                &lt;/goals&gt;
                                &lt;configuration&gt;
                                    &lt;outputDirectory&gt;
                                        ${project.build.directory}/jboss-as-${jbossas.version}/modules/javax/validation/api/main
                                    &lt;/outputDirectory&gt;
                                    &lt;stripVersion&gt;true&lt;/stripVersion&gt;
                                    &lt;artifactItems&gt;
                                        &lt;artifactItem&gt;
                                            &lt;groupId&gt;javax.validation&lt;/groupId&gt;
                                            &lt;artifactId&gt;validation-api&lt;/artifactId&gt;
                                        &lt;/artifactItem&gt;
                                    &lt;/artifactItems&gt;
                                &lt;/configuration&gt;
                            &lt;/execution&gt;
                        &lt;/executions&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                            &lt;argLine&gt;-Xmx1024m -Djava.util.logging.manager=org.jboss.logmanager.LogManager&lt;/argLine&gt;
                            &lt;forkMode&gt;once&lt;/forkMode&gt;
                            &lt;suiteXmlFiles&gt;
                                &lt;suiteXmlFile&gt;${tck.suite.file}&lt;/suiteXmlFile&gt;
                            &lt;/suiteXmlFiles&gt;
                            &lt;systemPropertyVariables&gt;
                                &lt;arquillian.launch&gt;incontainer&lt;/arquillian.launch&gt;
                                &lt;validation.provider&gt;${validation.provider}&lt;/validation.provider&gt;
                                &lt;includeIntegrationTests&gt;true&lt;/includeIntegrationTests&gt;
                            &lt;/systemPropertyVariables&gt;
                        &lt;/configuration&gt;
                    &lt;/plugin&gt;
                &lt;/plugins&gt;
            &lt;/build&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
&lt;/project&gt;</programlisting>In this you would start the tests via
        (activation order is important):<programlisting>mvn test -Ddebug -Dincontainer</programlisting>The
        test execution would start but then be suspended until the JVM
        receives a remote debugging request on port 5005. </para>
      </section>
    </section>
  </section>

  <section id="configuration-arquillian-xml">
    <title>arquillian.xml</title>

    <para>The next piece in the configuration puzzle is
    <filename>arquillian.xml</filename>. This xml file needs to be in the root
    of the classpath and is used to pass additional options to the selected
    container. Let's look at an example:<programlisting>&lt;arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://jboss.org/schema/arquillian
        http://jboss.org/schema/arquillian/arquillian_1_0.xsd"&gt;

    &lt;!-- Need to set the default protocol and use resource filtering, because of https://issues.jboss.org/browse/ARQ-579 --&gt;
    &lt;defaultProtocol type="${arquillian.protocol}"/&gt;

    &lt;engine&gt;
        &lt;property name="deploymentExportPath"&gt;target/artifacts&lt;/property&gt;
    &lt;/engine&gt;

    &lt;container qualifier="local" default="true"&gt;
        &lt;protocol type="Local"/&gt;   &lt;!-- Takes no effect - ARQ-579 --&gt;
    &lt;/container&gt;

    &lt;container qualifier="incontainer"&gt;
        &lt;protocol type="Servlet 3.0"/&gt; &lt;!-- Takes no effect - ARQ-579 --&gt;
        &lt;configuration&gt;
            &lt;property name="jbossHome"&gt;${jbossTargetDir}&lt;/property&gt;
            &lt;property name="javaVmArguments"&gt;-Xmx1024m -XX:MaxPermSize=512m ${remote.debug} -Dvalidation.provider=${validation.provider}&lt;/property&gt;
            &lt;property name="allowConnectingToRunningServer"&gt;true&lt;/property&gt;
        &lt;/configuration&gt;
    &lt;/container&gt;

&lt;/arquillian&gt;</programlisting></para>

    <para>In this case we have two <emphasis>container</emphasis> nodes,
    <emphasis>local</emphasis> and <emphasis>incontainer</emphasis>. The
    selection of which configuration to chose at runtime is made by setting
    the system property <property>arquillian.launch</property>. If
    <property>arquillian.launch</property> is not specify the default is
    selected which in this case is <emphasis>local</emphasis>.</para>

    <para>The most important container configuration option is the protocol
    type which determines how Arquillian communicates with the selected
    container. The most popular types are <emphasis>Local</emphasis> and
    <emphasis>Servlet 3.0</emphasis>. The protocol can be defined per
    container node, however, due to a bug only the
    <property>defaultProtocol</property> setting takes effect. This is also
    the reason for the <property>arquillian.protocol</property> property used
    in the pom examples. Depending on the chosen profile the appropriate
    protocol is selected and added to <filename>arquillian.xml</filename> via
    <ulink
    url="http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html">resource
    filtering</ulink>. </para>

    <para>Another interesting property is
    <property>deploymentExportPath</property> which is optional and instructs
    Arquillian to dump the test artifacts to the specified directory on disk.
    Inspection of the deployed artifacts can be very useful when debugging
    test failures.</para>
  </section>
</chapter>
